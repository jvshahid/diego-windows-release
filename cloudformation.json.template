{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "SecurityGroup": {
      "Description": "Security group ID to use for the Windows cells",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "BoshUserName": {
      "Description": "Username for bosh director.",
      "Type": "String"
    },
    "BoshPassword": {
      "Description": "Pasword for bosh director.",
      "Type": "String",
      "NoEcho" : "true"
    },
    "BoshHost": {
      "Description": "Bosh director (e.g. 127.0.0.1).",
      "Type": "String"
    },
    "ContainerizerPassword": {
      "Description": "Password for containerizer user e.g. Password123.",
      "Type": "String",
      "NoEcho" : "true",
      "AllowedPattern": "[a-zA-Z0-9]+",
      "ConstraintDescription": "Must be alphanumeric, with at least one capital letter, one lowercase letter, and one number."
    },
    "CellName": {
      "Description": "The name for your cell",
      "Type": "String",
      "Default": "windows_cell"
    },
    "SubnetCIDR": {
      "Description": "The IP range to use for the Windows cell subnet. It should not collide with an existing subnet within the VPC.",
      "Type": "String",
      "Default": "10.0.100.0/24"
    },
    "NATInstance": {
      "Description": "The instance ID of the NAT box. Search for 'NAT' (case-sensitive) in the dropdown, it will typically be the first result.",
      "Type": "AWS::EC2::Instance::Id"
    },
    "DesiredCapacity": {
      "Description": "The number of Windows cells to deploy",
      "Type": "Number"
    },
    "KeyPair": {
      "Description": "A keypair that you have the private key to",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "VPCID": {
      "Description": "The vpc in which the cell and subnet will be created",
      "Type": "AWS::EC2::VPC::Id"
    },
    "ZZZGenerateUrl": {
      "Description": "URL of generate.exe",
      "Type": "String",
      "Default": ""
    },
    "ZZZDiegoWindowsMsiUrl": {
      "Description": "URL of the DiegoWindows.msi to install",
      "Type": "String",
      "Default": ""
    },
    "ZZZGardenWindowsMsiUrl": {
      "Description": "URL of the GardenWindows.msi to install",
      "Type": "String",
      "Default": ""
    },
    "ZZZSetupPs1Url": {
      "Description": "URL of the setup.ps1 to run",
      "Type": "String",
      "Default": ""
    }
  },
  "Resources": {
    "GardenWindowsSubnet": {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "CidrBlock" : {"Ref": "SubnetCIDR"},
        "VpcId" : { "Ref" : "VPCID" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "GardenWindowsSubnet"
          }
        ]
      }
    },
    "GardenWindowsRouteTable":{
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref": "VPCID"},
        "Tags": [
          {
            "Key": "Name",
            "Value": "GardenWindowsRouteTable"
          }
        ]
      }
    },
    "GardenWindowsRoute": {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "DestinationCidrBlock" : "0.0.0.0/0",
        "InstanceId" : {"Ref": "NATInstance"},
        "RouteTableId" : {"Ref": "GardenWindowsRouteTable"}
      }
    },
    "GardenWinsowSubnetRouteTableAssociation": {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "RouteTableId" : {"Ref": "GardenWindowsRouteTable"},
        "SubnetId" : {"Ref": "GardenWindowsSubnet"}
      }
    },
    "GardenWindowsInstanceConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "C:\\tmp\\dwminst\\init.bat" : {
                "content" : { "Fn::Join" : ["", [
                  "net user containerizer ", { "Ref": "ContainerizerPassword" }, " /ADD",
                  "\n",

                  "net localgroup administrators containerizer /ADD",
                  "\n",

                  "C:\\tmp\\dwminst\\generate.exe",
                  " -boshUrl=https://", { "Ref": "BoshUserName" }, ":", { "Ref": "BoshPassword" }, "@", { "Ref": "BoshHost" }, ":25555",
                  " -outputDir=C:\\tmp\\dwminst",
                  " -windowsUsername=containerizer",
                  " -windowsPassword=", { "Ref": "ContainerizerPassword" },
                  "\n",

                  "PowerShell.exe -ExecutionPolicy Unrestricted C:\\tmp\\dwminst\\setup.ps1",
                  "\n",

                  "C:\\tmp\\dwminst\\install.bat",
                  "\n"
                ]]}
              },
              "C:\\tmp\\dwminst\\generate.exe" : {
                "source" : {"Ref": "ZZZGenerateUrl"}
              },
              "C:\\tmp\\dwminst\\GardenWindows.msi" : {
                "source" : {"Ref": "ZZZGardenWindowsMsiUrl"}
              },
              "C:\\tmp\\dwminst\\DiegoWindows.msi" : {
                "source" : {"Ref": "ZZZDiegoWindowsMsiUrl"}
              },
              "C:\\tmp\\dwminst\\setup.ps1" : {
                "source" : {"Ref": "ZZZSetupPs1Url"}
              }
            },
            "commands": {
              "1-init": {
                "command": "c:\\tmp\\dwminst\\init.bat > c:\\tmp\\dwminst\\debug-stdout.log 2> c:\\tmp\\dwminst\\debug-stderr.log"
              },
              "2-cleanup": {
                "command": "rd /s /q c:\\tmp\\dwminst"
              }
            },
            "services" : {
              "windows" : {
                "ContainerizerService" : {
                  "ensureRunning" : "true"
                },
                "GardenWindowsService" : {
                  "ensureRunning" : "true"
                },
                "RepService" : {
                  "ensureRunning" : "true"
                },
                "MetronService" : {
                  "ensureRunning" : "true"
                },
                "ConsulService" : {
                  "ensureRunning" : "true"
                }
              }
            }
          }
        }
      },

      "Properties": {
        "ImageId": {
          "Fn::GetAtt": [
            "AMIInfo",
            "Id"
          ]
        },
        "InstanceType": "r3.xlarge",
        "InstanceMonitoring" : "false",
        "SecurityGroups": [{ "Ref": "SecurityGroup" }],
        "KeyName": {"Ref": "KeyPair"},
        "UserData": { "Fn::Base64": { "Fn::Join": [ "", [
          "<script>\n",
          "cfn-init.exe -v -s ", { "Ref": "AWS::StackId" }, " -r GardenWindowsInstanceConfiguration",
          "\n",

          "cfn-signal.exe -e %ERRORLEVEL% ", { "Fn::Base64" : { "Ref" : "DWMWaitHandle" }},
          "\n",

          "</script>"
        ]]}}
      }
    },

    "DWMWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "DWMWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "GardenWindowsInstanceConfiguration",
      "Properties" : {
        "Handle" : {"Ref" : "DWMWaitHandle"},
        "Timeout" : "3600",
        "Count" : { "Ref" : "DesiredCapacity" }
      }
    },

    "GardenWindowsAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Version": "2009-05-15",
      "Properties": {
        "VPCZoneIdentifier": [{"Ref": "GardenWindowsSubnet"}],
        "LaunchConfigurationName": { "Ref": "GardenWindowsInstanceConfiguration" },
        "MinSize": "1",
        "MaxSize": { "Ref": "DesiredCapacity" },
        "DesiredCapacity": { "Ref": "DesiredCapacity" },
        "Tags" : [{
          "Key"   : "Name",
          "Value" : "windows_cell",
          "PropagateAtLaunch" : "true"
        }]
      }
    },

    "AMIInfo": {
      "Type": "Custom::AMIInfo",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt" : ["AMIInfoFunction", "Arn"] },
        "Region": { "Ref": "AWS::Region" }
      }
    },

    "AMIInfoFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile":  { "Fn::Join": ["\n", [
            "var aws = require('aws-sdk');",
            "var response = require('cfn-response');",
            "exports.handler = function(event, context) {",
            "    console.log('REQUEST RECEIVED:\\n' + JSON.stringify(event));",
            "    if (event.RequestType == 'Delete') {",
            "        response.send(event, context, response.SUCCESS);",
            "        return;",
            "    }",
            "    var responseStatus = response.FAILED;",
            "    var responseData = {};",
            "    var ec2 = new aws.EC2({region: event.ResourceProperties.Region});",
            "    var describeImagesParams = {",
            "        Filters: [{ Name: 'name', Values: ['Windows_Server-2012-R2_RTM-English-64Bit-Base*']}],",
            "        Owners: ['amazon']",
            "    };",
            "    ec2.describeImages(describeImagesParams, function(err, describeImagesResult) {",
            "        if (err) {",
            "            responseData = {Error: 'DescribeImages call failed'};",
            "            console.log(responseData.Error + ':\\n', err);",
            "            response.send(event, context, response.FAILED, responseData);",
            "        }",
            "        else {",
            "            var images = describeImagesResult.Images;",
            "            // Sort images by name in decscending order. The names contain the AMI version, formatted as YYYY.MM.Ver.",
            "            images.sort(function(x, y) { return y.Name.localeCompare(x.Name); });",
            "            for (var j = 0; j < images.length; j++) {",
            "                responseStatus = response.SUCCESS;",
            "                responseData['Id'] = images[j].ImageId;",
            "                break;",
            "            }",
            "        }",
            "        response.send(event, context, responseStatus, responseData);",
            "    });",
            "};"
          ]]}
        },
        "Handler": "index.handler",
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Runtime": "nodejs",
        "Timeout": "30"
      }
    },

    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"],
              "Resource": "arn:aws:logs:*:*:*"
            },
            {
              "Effect": "Allow",
              "Action": ["ec2:DescribeImages"],
              "Resource": "*"
            }]
          }
        }]
      }
    }
  },
  "Description": "Windows cell"
}
